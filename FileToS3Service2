package com.sahi.thematic.service;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;
import com.amazonaws.services.s3.model.InitiateMultipartUploadRequest;
import com.amazonaws.services.s3.model.InitiateMultipartUploadResult;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PartETag;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.amazonaws.services.s3.model.UploadPartRequest;
import com.amazonaws.services.s3.model.UploadPartResult;
import com.amazonaws.services.s3.transfer.TransferManager;
import com.amazonaws.services.s3.transfer.TransferManagerBuilder;
import com.amazonaws.services.s3.transfer.Upload;



@Service
public class FileToS3Service {
	
	

	    private AmazonS3 s3client;

	    @Value("${amazonProperties.endpointUrl}")
	    private String endpointUrl;
	    @Value("${amazonProperties.bucketName}")
	    private String bucketName;
	    @Value("${amazonProperties.accessKey}")
	    private String accessKey;
	    @Value("${amazonProperties.secretKey}")
	    private String secretKey;
	    @Value("${amazonProperties.basePath}")
	    private String basePath;
	    private final int AWS_PART_BUFFER_LENGTH = 5*1024*1024;
	    File file = new File(basePath);
	    private long contentLength = file.length();
	    private TransferManager transferManager;
	@PostConstruct
	    private void initializeAmazon() {
	       AWSCredentials credentials = new BasicAWSCredentials(this.accessKey, this.secretKey);
	       this.s3client = new AmazonS3Client(credentials);
	       this.transferManager= TransferManagerBuilder.standard().withS3Client(s3client).build();
	       System.out.println("Intialized");
	}
	private File convertMultiPartToFile(MultipartFile file) throws IOException {
	    File convFile = new File(file.getOriginalFilename());
	    FileOutputStream fos = new FileOutputStream(convFile);
	    fos.write(file.getBytes());
	    fos.close();
	    return convFile;
	}
	private String generateFileName(MultipartFile multiPart) {
	    return new Date().getTime() + "-" + multiPart.getOriginalFilename().replace(" ", "_");
	}
	private void uploadFileTos3bucket(String fileName, File file) {
	    s3client.putObject(new PutObjectRequest(bucketName, fileName, file)
	            .withCannedAcl(CannedAccessControlList.PublicRead));
	}
	public String uploadFile(MultipartFile multipartFile) throws IOException, AmazonServiceException, AmazonClientException, InterruptedException {
		String fileName = generateFileName(multipartFile);
		InputStream inputStream =  new BufferedInputStream(multipartFile.getInputStream());
		System.out.println(inputStream);
		sinkS3(inputStream,fileName);
//	    String fileUrl = "";
//	    try {
//	        File file = convertMultiPartToFile(multipartFile);
//	        String fileName = basePath.concat(generateFileName(multipartFile));
//	        fileUrl = endpointUrl + "/" + bucketName + "/" + fileName;
//	        uploadFileTos3bucket(fileName, file);
//	        file.delete();
//	    } catch (Exception e) {
//	       e.printStackTrace();
//	    }
	    return fileName;
	}
	
	public void sinkS3(InputStream stream, String fileName) throws IOException, AmazonServiceException, AmazonClientException, InterruptedException {
		// TODO Auto-generated method stub
		String s3Key = basePath.concat(fileName);
		List<PartETag> partETags = new ArrayList<>();
		InitiateMultipartUploadRequest initRequest = new InitiateMultipartUploadRequest(bucketName, s3Key);
		InitiateMultipartUploadResult initResponse = s3client.initiateMultipartUpload(initRequest);
		byte[] partBuffer = new byte[AWS_PART_BUFFER_LENGTH];
		int partBufPtr=0;
		int partNumber=1;
		boolean isMultiPartMode=false;
		byte[] buffer;
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] intBuffer = new byte[1024];
		while(stream.read(intBuffer)!=-1)
		{
			bos.write(intBuffer);
			bos.flush();
			buffer = bos.toByteArray();
			bos.reset();
			System.out.println(partBufPtr+"   "+AWS_PART_BUFFER_LENGTH);
			if((buffer.length + partBufPtr) < AWS_PART_BUFFER_LENGTH) {
				System.arraycopy(buffer, 0, partBuffer, partBufPtr, buffer.length);
				partBufPtr+=buffer.length;
			} else {
				isMultiPartMode = true;
				byte[] intmdtBuffer = new byte[partBufPtr+ buffer.length];
				System.arraycopy(partBuffer, 0, intmdtBuffer, 0, partBufPtr);
				System.arraycopy(buffer, 0, intmdtBuffer, partBufPtr, buffer.length);
				ByteArrayInputStream is = new ByteArrayInputStream(intmdtBuffer);
				UploadPartRequest uploadRequest = new UploadPartRequest().withBucketName(bucketName).withKey(s3Key)
						.withUploadId(initResponse.getUploadId()).withPartNumber(partNumber++)
						.withPartSize(partBufPtr + buffer.length).withInputStream(is);
				UploadPartResult uploadResult = s3client.uploadPart(uploadRequest);
				partETags.add(uploadResult.getPartETag());
				partBuffer = new byte[AWS_PART_BUFFER_LENGTH];
				partBufPtr = 0;
			}
			intBuffer = new byte[1024];
		}
		bos.flush();
		buffer = bos.toByteArray();
		bos.close();
		if(!isMultiPartMode) {
			System.arraycopy(buffer, 0, partBuffer, partBufPtr, buffer.length);
			partBufPtr+=buffer.length;
			byte[] toUpload = new byte[partBufPtr];
			System.arraycopy(partBuffer, 0, toUpload, 0, partBufPtr);
			ObjectMetadata objectMetadata = new ObjectMetadata();
			objectMetadata.setContentLength(toUpload.length);
			ByteArrayInputStream is = new ByteArrayInputStream(toUpload);
			Upload upload = transferManager.upload(bucketName, s3Key, is, objectMetadata);
			upload.waitForUploadResult();
		} else {
			byte[] intmdtBuffer =  new byte[partBufPtr+buffer.length];
			System.arraycopy(partBuffer, 0, intmdtBuffer, 0, partBufPtr);
			System.arraycopy(buffer, 0, intmdtBuffer, partBufPtr, buffer.length);
			ByteArrayInputStream is = new ByteArrayInputStream(intmdtBuffer);
			UploadPartRequest uploadRequest = new UploadPartRequest().withBucketName(bucketName).withKey(s3Key)
					.withUploadId(initResponse.getUploadId()).withPartNumber(partNumber++)
					.withPartSize(partBufPtr + buffer.length).withInputStream(is);
			UploadPartResult uploadResult = s3client.uploadPart(uploadRequest);
			partETags.add(uploadResult.getPartETag());
			CompleteMultipartUploadRequest comRequest = new CompleteMultipartUploadRequest(bucketName,s3Key,
					initResponse.getUploadId(),partETags);
			s3client.completeMultipartUpload(comRequest);
			
		}
		System.out.println("uploaded");
		
	}
	public String listFilesInS3() {
		List<S3ObjectSummary> obj=s3client.listObjectsV2(bucketName).getObjectSummaries();
        for(S3ObjectSummary os:obj) {
        	System.out.println(os.getKey());
        }
		return null;
	}
	
}
